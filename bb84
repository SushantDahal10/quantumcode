import numpy as np
from qiskit import QuantumCircuit, Aer, execute
import random

# Number of bits to generate
n = 100  # Feel free to change this

# Step 1: Alice generates random bits and bases
alice_bits = np.random.randint(2, size=n)
alice_bases = np.random.randint(2, size=n)  # 0 for Z (+), 1 for X (Ã—)

# Step 2: Bob randomly chooses bases
bob_bases = np.random.randint(2, size=n)

# Prepare circuits and simulate transmission
results = []
backend = Aer.get_backend('aer_simulator')

for i in range(n):
    qc = QuantumCircuit(1, 1)

    # Prepare qubit
    if alice_bits[i] == 1:
        qc.x(0)
    if alice_bases[i] == 1:
        qc.h(0)  # Put in X basis

    # Bob measures
    if bob_bases[i] == 1:
        qc.h(0)  # Rotate to X basis

    qc.measure(0, 0)
    result = execute(qc, backend=backend, shots=1, memory=True).result()
    measured_bit = int(result.get_memory()[0])
    results.append(measured_bit)

# Step 3: Basis reconciliation (keep bits where bases matched)
key_bits = []
alice_key = []
bob_key = []
for i in range(n):
    if alice_bases[i] == bob_bases[i]:
        alice_key.append(alice_bits[i])
        bob_key.append(results[i])

# Step 4: Check agreement
key_length = len(alice_key)
matches = sum([1 for a, b in zip(alice_key, bob_key) if a == b])

print(f"Total bits sent: {n}")
print(f"Bits kept after basis match: {key_length}")
print(f"Matching bits: {matches}")
print(f"Sample of shared key: {alice_key[:10]}")
